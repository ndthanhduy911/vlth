$(function () {
    "use strict";
    $(function () {
            $(".preloader").fadeOut();
        }),

        jQuery(document).on("click", ".mega-dropdown", function (i) {
            i.stopPropagation();
        });

    let page = $('.page-wrapper');
    var i = function () {
        (window.innerWidth > 0 ? window.innerWidth : this.screen.width) < 1170 ? ($("body").addClass("mini-sidebar"),
            $(".navbar-brand span").hide(), $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"),
            $(".sidebartoggler i").addClass("ti-menu")) : ($("body").removeClass("mini-sidebar"),
            $(".navbar-brand span").show());
        var i = (window.innerHeight > 0 ? window.innerHeight : this.screen.height) - 1;
        (i -= 70) < 1 && (i = 1), i > 70 && $(".page-wrapper").css("min-height", i + "px");
    };


    $(window).ready(i), $(window).on("resize", i), $(".sidebartoggler").on("click", function () {
        $("body").hasClass("mini-sidebar") ? ($("body").trigger("resize"), $(".scroll-sidebar, .slimScrollDiv").css("overflow", "hidden").parent().css("overflow", "visible"),
            $("body").removeClass("mini-sidebar"), $(".navbar-brand span").show()) : ($("body").trigger("resize"),
            $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"),
            $("body").addClass("mini-sidebar"), $(".navbar-brand span").hide());
    }),


    $(".fix-header .header").stick_in_parent({}), $(".nav-toggler").click(function () {
        $("body").toggleClass("show-sidebar"), $(".nav-toggler i").toggleClass("mdi mdi-menu"),
            $(".nav-toggler i").addClass("mdi mdi-close");
    }),


    $(".search-box a, .search-box .app-search .srh-btn").on("click", function () {
        $(".app-search").slideToggle(200);
    }),


    $(".floating-labels .form-control").on("focus blur", function (i) {
        $(this).parents(".form-group").toggleClass("focused", "focus" === i.type || this.value.length > 0);
    }).trigger("blur"), $(function () {
        for (var i = window.location, o = $("ul#sidebarnav a").filter(function () {
                return this.href == i;
            }).addClass("active").parent().addClass("active");;) {
            if (!o.is("li")) break;
            o = o.parent().addClass("in").parent().addClass("active");
        }
    }),

    $(function () {
        // $("#sidebarnav").metisMenu();
    }),

    $(".scroll-sidebar").slimScroll({
        position: "left",
        size: "5px",
        height: "100%",
        color: "#dcdcdc"
    }),

    $(".message-center").slimScroll({
        position: "right",
        size: "5px",
        color: "#dcdcdc"
    }),

    $(".aboutscroll").slimScroll({
        position: "right",
        size: "5px",
        height: "80",
        color: "#dcdcdc"
    }),

    $(".message-scroll").slimScroll({
        position: "right",
        size: "5px",
        height: "570",
        color: "#dcdcdc"
    }),

    $(".chat-box").slimScroll({
        position: "right",
        size: "5px",
        height: "470",
        color: "#dcdcdc"
    }),

    $(".slimscrollright").slimScroll({
        height: "100%",
        position: "right",
        size: "5px",
        color: "#dcdcdc"
    }),

    $("body").trigger("resize"), $(".list-task li label").click(function () {
        $(this).toggleClass("task-done");
    }),

    $("#to-recover").on("click", function () {
        $("#loginform").slideUp(), $("#recoverform").fadeIn();
    }),


    $('a[data-action="collapse"]').on("click", function (i) {
        i.preventDefault(), $(this).closest(".card").find('[data-action="collapse"] i').toggleClass("ti-minus ti-plus"),
            $(this).closest(".card").children(".card-body").collapse("toggle");
    }),


    $('a[data-action="expand"]').on("click", function (i) {
        i.preventDefault(), $(this).closest(".card").find('[data-action="expand"] i').toggleClass("mdi-arrow-expand mdi-arrow-compress"),
            $(this).closest(".card").toggleClass("card-fullscreen");
    }),

    $('a[data-action="close"]').on("click", function () {
        $(this).closest(".card").removeClass().slideUp("fast");
    });

    //Popup delete
    page.on('click', '.delete-confirm', function (e) {
        e.preventDefault();
        let _this = $(this);
        let obj = _this.attr('obj');
        let table = $(this).parents('table');
        let tr = _this.parents('tr');
        swal({
            title: "Bạn có chắc muốn xóa ?",
            text: `Bạn sẽ không khôi phục lại ${obj} này !!`,
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Đồng ý",
            cancelButtonText: "Đóng",
            closeOnConfirm: false
        }, function () {
            let id = _this.attr('data-id');
            let link = _this.attr('href');
            $("#preloader").fadeIn();     
            $.ajax({
                type: "POST",
                url: link,
                data: {
                    id: id
                },
                dataType: 'json',
                success: function (results) {
                    $("#preloader").fadeOut();  
                    swal("Đã xóa !!", `${obj}  đã được xóa thành công !!`, "success");
                    table.dataTable().fnDeleteRow(_this.parents('tr'));
                },
                error: function (err) {
                    $("#preloader").fadeOut();
                    if (err.responseJSON === undefined) {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">${obj} đang được sử dụng !!</strong>`,
                            type: "error",
                            html: true
                        });
                        window.location.reload();
                    } else {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">${obj} không xóa được !!</strong>`,
                            type: "error",
                            html: true
                        });
                    }
                }
            });

        });
    });

    page.on('click', '.delete-comment', function (e) {
        e.preventDefault();
        let _this = $(this);
        swal({
            title: "Bạn có chắc muốn xóa bình luận này ?",
            text: `Bạn sẽ không khôi phục lại được bình luận này !!`,
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Đồng ý",
            closeOnConfirm: true
        }, function () {
            let link = _this.attr('href');
            $("#preloader").fadeIn();      
            $.ajax({
                type: "POST",
                url: link,
                data: '',
                dataType: 'json',
                success: function (results) {
                    $("#preloader").fadeOut();
                    _this.parents('.comment-detail').remove();
                },
                error: function (err) {
                    $("#preloader").fadeOut();
                    if (err.responseJSON === undefined) {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                            type: "error",
                            html: true
                        });
                    } else {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Không tìm thấy bình luận này !!</strong>`,
                            type: "error",
                            html: true
                        });
                    }
                }
            });

        });
    });

    page.on('click', '.delete-client-comment', function (e) {
        e.preventDefault();
        let _this = $(this);
        swal({
            title: "Bạn có chắc muốn xóa bình luận này ?",
            text: `Bạn sẽ không khôi phục lại được bình luận này !!`,
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Đồng ý",
            closeOnConfirm: true
        }, function () {
            let link = _this.attr('href');
            $("#preloader").fadeIn();      
            $.ajax({
                type: "POST",
                url: link,
                data: '',
                dataType: 'json',
                success: function (results) {
                    $("#preloader").fadeOut();
                    _this.parents('.message-detail').remove();
                },
                error: function (err) {
                    $("#preloader").fadeOut();
                    if (err.responseJSON === undefined) {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                            type: "error",
                            html: true
                        });
                    } else {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Không tìm thấy bình luận này !!</strong>`,
                            type: "error",
                            html: true
                        });
                    }
                }
            });

        });
    });

    page.on('click', '.delete-language', function (e) {
        e.preventDefault();
        let _this = $(this);
        let table = $('#language');
        swal({
            title: "Bạn có chắc muốn nội dung này ?",
            text: `Bạn sẽ không khôi phục lại được nội dung này !!`,
            type: "warning",
            showCancelButton: true,
            confirmButtonColor: "#DD6B55",
            confirmButtonText: "Đồng ý",
            closeOnConfirm: true
        }, function () {
            let link = _this.attr('href');
            $("#preloader").fadeIn();      
            $.ajax({
                type: "GET",
                url: link+'/'+$id,
                data: '',
                dataType: 'json',
                success: function (results) {
                    $("#preloader").fadeOut();
                    table.dataTable().fnDeleteRow(_this.parents('tr'));
                },
                error: function (err) {
                    $("#preloader").fadeOut();
                    if (err.responseJSON === undefined) {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                            type: "error",
                            html: true
                        });
                    } else {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Không tìm thấy bình luận này !!</strong>`,
                            type: "error",
                            html: true
                        });
                    }
                }
            });

        });
    });

    //Show modal Client
    page.on('click', '#client .editClient', function (e) {
        e.preventDefault();
        let _this = $(this);
        let id = _this.attr('data-id');
        let modalCl = $('#modalEditClient');
        let form = $('#modalEditClient #frmEditClient');
        let table = $('#client');
        modalCl.modal('show');
        modalCl.find('input, textarea, select').val('');
        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let name = tr.find('td:eq(1)').text();
        let address = tr.find('td:eq(2)').text(); 
        let package_id = tr.find('td:eq(8)').html();        
        package_id = package_id ? JSON.parse(package_id) : [];     
        let email = tr.find('td:eq(4)').text(); 
        let phone = tr.find('td:eq(5)').text(); 
        let status = tr.find('td:eq(6)').find('span').attr('status');
        form.attr('action', href);
        modalCl.find('#name').val(name);
        modalCl.find('#address').val(address);
        modalCl.find('#status').val(status);

        if($('#onlydept').length){
            modalCl.find('#department_id').val($('#onlydept').text().trim()).trigger('change');
            modalCl.find('#department_id').attr('disabled',true);
        }else{
            let department_id = tr.find('td:eq(3) span').attr('data-id');
            modalCl.find('#department_id').val(department_id).trigger('change');
            $('#department_id').selectpicker();
        }

        modalCl.find('.multiple-select').val(package_id).trigger('change');
        modalCl.find('#email').val(email);
        modalCl.find('#phone').val(phone);
        modalCl.find('.modal-title').text('Cập nhật khách hàng');
        modalCl.find('.modal-footer button[type="submit"]').text('Cập nhật');
        modalCl.find('.btn-changePWC').attr('data-id',id);
        modalCl.find('.show-changePW').removeClass('hidden');
        $('.multiple-select').select2({
            placeholder: "Chọn...",
            allowClear: true
        });
        form.validator('update');
        
        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let client = results.client;
                        let department_name = modalCl.find('#department_id option:selected').text();
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            client.name,
                            client.address,
                            `<span data-id="${client.department_id}">${department_name}</span>`,
                            client.email,
                            client.phone,
                            function () {
                                if(client.status == 1){
                                    return `<span status="${client.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${client.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editClient" data-id="${ client.id }" href="/adcp/client/edit/${client.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${client.id} obj="Người yêu cầu" href="/adcp/client/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            client.package_id
                        ], parseInt(_this.parents('tr').index()), undefined, false, false);
                        swal("Thành công !!", `Người yêu cầu được cập nhật thành công !!`, "success");
                        modalCl.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });
        
        modalCl.on('click','.btn-changePW', function (e) {
            e.preventDefault();
            $('#frmChangePWClient').removeClass('hidden');
        });
    
        $('#frmChangePWClient').validator().on('submit', function (e) {
            let id = $('.btn-changePWC').attr('data-id');
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = $('#frmChangePWClient').serializeArray();
                data.push({
                    name: 'id',
                    value: id
                })
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: $('#frmChangePWClient').attr('action'),
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        modalCl.modal('hide');
                        swal("Thành công !!", `Thay đổi mật khẩu thành công !!`, "success");
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });
        modalCl.on('hide.bs.modal', function (e) {
            modalCl.find('.show-changePW').addClass('hidden');
            modalCl.find('#frmChangePWClient').addClass('hidden');
            $('.multiple-select').val('').trigger('change');
            form.validator('destroy');
            form.off();
            modalCl.off();
        });
    });
    page.on('click', '.addClient', function (e) {
        e.preventDefault();
        
        let modalCl = $('#modalEditClient');
        let href = $(this).attr('href');
        let form = $('#modalEditClient #frmEditClient');
        let table = $('#client');
        modalCl.find('input, textarea, select').val('');
        if($('#onlydept').length){
            modalCl.find('#department_id').val($('#onlydept').text().trim()).trigger('change');
            modalCl.find('#department_id').attr('disabled',true);
        }else{
            $('#department_id').selectpicker('val','');
        }
        
        $('.multiple-select').select2({
            placeholder: "Chọn...",
            allowClear: true
        });
        modalCl.modal('show');
        form.attr('action', href);
        
        modalCl.find('.modal-title').text('Thêm người yêu cầu');
        modalCl.find('.modal-footer button[type="submit"]').text('Thêm');

        form.validator('update');
        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let client = results.client;
                        let department_name = modalCl.find('#department_id option:selected').text();
                        swal("Thành công !!", `Người yêu cầu được tạo thành công và mật khẩu đã được gửi tới email của họ !!`, "success");
                        table.dataTable().fnAddData([
                            '',
                            client.name,
                            client.address,
                            `<span data-id="${ client.department_id }">${ department_name }</span>`,
                            client.email,
                            client.phone,
                            function () {
                                if(client.status == 1){
                                    return `<span status="${client.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${client.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editClient" data-id="${ client.id }" href="/adcp/client/edit/${client.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${client.id} obj="Người yêu cầu" href="/adcp/client/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            client.package_id,
                        ]);
                        modalCl.modal('hide');
                        sendEmail({
                            client_email : client.email,
                            client_name: client.name,
                            title: results.title,
                            body: results.body
                        })
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalCl.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            $('.multiple-select').val('').trigger('change');
            form.off();
            modalCl.off();
        });
    });

    //Show modal Package
    page.on('click', '#package .editPackage', function (e) {
        e.preventDefault();

        let modalLang = $('#modalEditPackage')
        let _this = $(this);
        let form = $('#modalEditPackage form');
        let table = $('#package');

        modalPk.modal('show');
        form.find('input, textarea, select').val('');

        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let name = tr.find('td:eq(1)').text();
        let note = tr.find('td:eq(2)').text();
        let status = tr.find('td:eq(3)').find('span').attr('status');

        form.attr('action', href);
        modalPk.find('#name').val(name);
        modalPk.find('#note').val(note);
        modalPk.find('#status').val(status);
        modalPk.find('.modal-title').text('Cập nhật dịch vụ');
        modalPk.find('.modal-footer button[type="submit"]').text('Cập nhật');

        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let packageObj = results.package;
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            packageObj.name,
                            packageObj.note,
                            function () {
                                if(packageObj.status == 1){
                                    return `<span status="${packageObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${packageObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editPackage" href="/adcp/package/edit/${packageObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${packageObj.id} obj="Dịch vụ" href="/adcp/package/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Dịch vụ được cập nhật thành công !!`, "success");
                        modalPk.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalPk.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalPk.off();
        });
    });
    page.on('click', '.addPackage', function (e) {
        e.preventDefault();

        let modalPk = $('#modalEditPackage')
        let href = $(this).attr('href');
        let table = $('#package');
        let form = $('#modalEditPackage form');
        modalPk.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');
        modalPk.find('.modal-title').text('Thêm dịch vụ');
        modalPk.find('.modal-footer button[type="submit"]').text('Thêm');
        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let packageObj = results.package;
                        table.dataTable().fnAddData([
                            '',
                            packageObj.name,
                            packageObj.note,
                            function () {
                                if(packageObj.status == 1){
                                    return `<span status="${packageObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${packageObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editPackage" href="/adcp/package/edit/${packageObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${packageObj.id} obj="Dịch vụ" href="/adcp/package/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            
                        ]);
                        swal("Thành công !!", `Dịch vụ được tạo thành công !!`, "success");
                        modalPk.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalPk.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalPk.off();
        });
    });

    //Show modal Language
    page.on('click', '#language .editLanguage', function (e) {
        e.preventDefault();

        let modalLang = $('#modalEditLanguage')
        let _this = $(this);
        let form = $('#modalEditLanguage form');
        let table = $('#language');

        modalLang.modal('show');
        form.find('input, textarea, select').val('');

        let tr = _this.parents('tr');
        let href = _this.attr('data-href');
        let lang_id = tr.find('.lang-id').text().trim();
        let lang_cl = tr.find('.lang-cl').text().trim();
        let lang_vi = tr.find('.lang-vi').text().trim();
        let lang_en = tr.find('.lang-en').text().trim();

        modalLang.find('#lang_vi').val(lang_vi);
        modalLang.find('#lang_en').val(lang_en);
        modalLang.find('#lang_id').val(lang_id);
        modalLang.find('#lang_cl').val(lang_cl);
        modalLang.find('.modal-title').text('Cập nhật dịch vụ');
        modalLang.find('.modal-footer button[type="submit"]').text('Cập nhật');

        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let languageObj = results.language;
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            lang_id,
                            lang_cl,
                            languageObj.vi,
                            languageObj.en,
                            `<a class="btn btn-primary btn-sm m-2-4 editLanguage" href="/adcp/language/edit">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${languageObj.id} obj="Dịch vụ" href="/adcp/language/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Từ ngữ đã được cập nhật thành công !!`, "success");
                        modalLang.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalLang.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalLang.off();
        });
    });

    // Show modal user
    page.on('click', '#userTB .editUser', function (e) {
        e.preventDefault();
        let modalUs = $('#modalEditUser')
        let _this = $(this);
        let form = $('#modalEditUser form');
        let table = $('#userTB');
        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let email = tr.find('td:eq(1)').text();
        let fullname = tr.find('td:eq(2)').text();
        let mobile = tr.find('td:eq(3)').text();
        let department_id = tr.find('td:eq(4) span').attr('data-id');
        let group_id = tr.find('td:eq(5) span').attr('data-id');
        let status = tr.find('td:eq(6) span').attr('status');
        let package_id = tr.find('td:eq(8)').html();
        package_id = package_id ? JSON.parse(package_id) : [];
        let address = tr.find('td:eq(9)').text();
        $("#password").prop('disabled', true);
        $("#password").prop('required', false);
        // $("#confirm_password").prop('disabled', true);
        // $("#confirm_password").prop('required', false);
        $("#password").parents('.form-row').hide();        
        // $("#confirm_password").parents('.form-row').hide();
        modalUs.modal('show');
        form.attr('action', href);
        modalUs.find('#email').val(email);
        modalUs.find('#fullname').val(fullname);
        modalUs.find('#mobile').val(mobile);
        modalUs.find('#address').val(address);
        modalUs.find('#status').val(status);
        modalUs.find('#group_id').val(group_id);
        modalUs.find('#department_id').val(department_id).trigger('change');
        modalUs.find('.multiple-select').val(package_id).trigger('change');
        modalUs.find('.modal-title').text('Cập nhật nhân viên');
        modalUs.find('.modal-footer button[type="submit"]').text('Cập nhật');
        form.validator('update');
        $('#department_id').selectpicker();
        $('.multiple-select').select2({
            placeholder: "Chọn...",
            allowClear: true
        });
        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let userObj = results.user;
                        let department_name = modalUs.find('#department_id option:selected').text();
                        let group_name = $('#group_id option:selected').text();
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            userObj.email,
                            userObj.fullname,
                            userObj.mobile,
                            `<span data-id="${userObj.department_id}">${department_name}</span>`,
                            `<span data-id="${userObj.group_id}">${group_name}</span>`,
                            function () {
                                if(userObj.status == 1){
                                    return `<span status="${userObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${userObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editUser" href="/adcp/user/edit/${userObj.id}">
                                    <i class="fa fa-edit"></i>
                                </a>
                                <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${userObj.id} obj="Tài khoản" href="/adcp/user/delete">
                                    <i class="fa fa-remove"></i>
                            </a>`,
                            userObj.package_id,
                            userObj.address,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Tài khoản được nhật thành công !!`, "success");
                        modalUs.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalUs.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalUs.off();
            $('.multiple-select').val('').trigger('change');
        });
    });
    page.on('click', '.addUser', function (e) {
        e.preventDefault();

        let modalUs = $('#modalEditUser')
        let href = $(this).attr('href');
        let table = $('#userTB');
        let form = $('#modalEditUser form');
        $("#password").prop('disabled', false);
        $("#password").prop('required', true);
        // $("#confirm_password").prop('disabled', false);
        // $("#confirm_password").prop('required', true);
        $("#password").parents('.form-row').show();        
        // $("#confirm_password").parents('.form-row').show();
        $('#department_id').selectpicker();
        modalUs.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');

        modalUs.find('.modal-title').text('Thêm nhân viên');
        modalUs.find('.modal-footer button[type="submit"]').text('Thêm');
        form.validator('update');

        $('.multiple-select').select2({
            placeholder: "Chọn...",
            allowClear: true

        });

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();                
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let userObj = results.user;
                        let department_name = modalUs.find('#department_id option:selected').text();
                        let group_name = $('#group_id option:selected').html();                        
                        
                        table.dataTable().fnAddData([
                            '',
                            userObj.email,
                            userObj.fullname,
                            userObj.mobile,
                            `<span data-id="${userObj.department_id}">${department_name}</span>`,
                            `<span data-id="${userObj.group_id}">${group_name}</span>`,
                            function () {
                                if(userObj.status == 1){
                                    return `<span status="${userObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${userObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editUser" href="/user/user/edit/${userObj.id}">
                                    <i class="fa fa-edit"></i>
                                </a>
                                <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${userObj.id} obj="Tài khoản" href="/user/user/delete">
                                    <i class="fa fa-remove"></i>
                                </a>`,
                            userObj.package_id,
                            userObj.address,
                        ]);
                        swal("Thành công !!", `Tạo tài khoản thành công`, "success");
                        modalUs.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalUs.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalUs.off();
            $('.multiple-select').val('').trigger('change');
        });
    });

    //Edit Comment
    page.on('click', '.editComment', function (e) {
        e.preventDefault();
        let _this = $(this);
        let content_detail = _this.parents('.comment-detail');
        let content_old = content_detail.find('article').html();
        let data_id = _this.attr('data-id');
        let button = _this.parents('.btn-group');
        button.find('.dropdown-toggle').dropdown('toggle');
    //     <div id="fileupload-edit-${data_id}" class="mt-2">
    //     <div class="row fileupload-buttonbar">
    //         <div class="col-lg-7">
    //             <!-- The fileinput-button span is used to style the file input field as button -->
    //             <span class="btn btn-success btn-sm fileinput-button">
    //                 <i class="fa fa-plus"></i>
    //                 <span>Thêm tệp tin</span>
    //                 <input id="file" type="file" name="files[]" multiple>
    //             </span>
    //             <span class="fileupload-process"></span>
    //         </div>
    //         <!-- The global progress state -->
    //         <div class="col-lg-5 fileupload-progress fade">
    //             <!-- The global progress bar -->
    //             <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
    //                 <div class="progress-bar progress-bar-success" style="width:0%;"></div>
    //             </div>
    //             <!-- The extended global progress state -->
    //             <div class="progress-extended">&nbsp;</div>
    //         </div>
    //     </div>
    //     <table role="presentation" class="table mt-2">
    //         <tbody class="files"></tbody>
    //     </table>
    // </div>
        if(!$(`.edit-comment-content-${data_id}`).length){
            content_detail.after(`
            <div class="edit-comment-editor">
                <div class="pb-cmnt-container col-md-12">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <div class="card-info card bg-info mt-0 p-t-20">
                                <div class="panel-body">
                                    <textarea placeholder="Hãy viết bình luận của bạn ở đây!" class="edit-comment-content-${data_id} pb-cmnt-textarea"></textarea>
                                    <form class="form-inline">
                                        <a href="javascript:;" class="btn btn-dark closeEditComment-${data_id} float-right mt-2 mr-1">Đóng</a>
                                        <a href="javascript:;" data-href="/adcp/support/editcomment/${data_id}" class="btn btn-info float-right mt-2 sendEditComment-${data_id}" >Sửa</a>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <hr>
                </div>
            </div>
            `)    
        }
        // countFile = 0;
        // fileSupport = [];
        // $('#fileupload-edit-'+data_id).fileupload({
        //     disableImageResize: /Android(?!.*Chrome)|Opera/
        //     .test(window.navigator.userAgent),
        //     acceptFileTypes: /(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i,
        //     maxFileSize: 1024*1024*10,
        //     change: function (e, data) {
        //         data.files.forEach(element => {
        //             if((/(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i).test(element.name) && element.size < 2*1024*1024){
        //                 fileSupport.push(element);
        //                 countFile ++;
        //             }
        //         });
        //         console.log(fileSupport);
        //         console.log(countFile);
        //     },
        // });
        // $('#fileupload-edit-'+data_id).on('click','.btn-cancel2',function (e) {
        //     e.preventDefault();
        //     let tr = $(this).parents('tr');
        //     let name = tr.find('td:eq(1)').text().trim();
        //     let index = fileSupport.findIndex((value)=>{
        //         return value.name === name;                                    
        //     });
        //     tr.remove();
        //     fileSupport.splice(index, 1);
        //     countFile --;                                                     
        // });
        
        $(`.edit-comment-content-${data_id}`).html(content_old.trim());
        
        $('.sendEditComment-'+data_id).off().click(function (e) { 
            e.preventDefault();
            let href = $(this).attr('data-href');
            let edittor = $(this).parents('.edit-comment-editor');
            let data = new FormData();
            let content = $('.edit-comment-content-'+data_id).val();
            if(!content && !fileSupport.length){
                swal({
                    title: "Lỗi !!",
                    text: `<strong class="text-danger"> Không có nội dung</strong>`,
                    type: "error",
                    html: true
                });
            }else{
                if(fileSupport.length){
                    fileSupport.forEach((file,index) => {
                        if(file.size){
                            data.append('file'+index, file);
                        }
                    });
                }
                data.append('content',content);
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let comment = results.comment;
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        if(comment.file!='[]' && comment.file){
                            let json = JSON.parse(comment.file) ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row">`
                                json.forEach((element)=>{
                                    if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                        }
                        content_detail.html(`
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="/images/hnn-avatar.png" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-light btn-sm dropdown-toggle waves-effect" data-toggle="dropdown" aria-expanded="true">
                                            Thêm
                                            <span class="caret m-l-5"></span>
                                        </button>
                                        <div class="dropdown-menu" style="font-size: 10px;">
                                            <a class="dropdown-item editComment" data-d="${comment.id}" href="javascript: void(0);">Chỉnh sửa</a>
                                            <a class="dropdown-item delete-comment" href="/adcp/support/deletecomment/${comment.id}">Xóa</a>
                                        </div>
                                    </div>
                                    ${moment().format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${results.name}</h6>
                                    <small class="text-muted">From: ${results.email}</small>
                                </div>
                            </div>
                            <article>
                                ${comment.content}
                            </article>
                            ${file_content}
                            <hr>
                        `);
                        fileSupport = [];
                        edittor.remove();
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });     
            }
        });

        $('.closeEditComment-'+data_id).off().click(function(e){
            e.preventDefault();
            $(this).parents('.edit-comment-editor').remove();

        })
    });


    page.on('click', '.editClientComment', function (e) {
        e.preventDefault();
        let _this = $(this);
        let content_detail = _this.parents('.message-detail');
        let content_old = content_detail.find('article').html();
        let data_id = _this.attr('data-id');
        let button = _this.parents('.btn-group');
        button.find('.dropdown-toggle').dropdown('toggle');
    //     <div id="fileupload-edit-${data_id}" class="mt-2">
    //     <div class="row fileupload-buttonbar">
    //         <div class="col-lg-7">
    //             <!-- The fileinput-button span is used to style the file input field as button -->
    //             <span class="btn btn-success btn-sm fileinput-button">
    //                 <i class="fa fa-plus"></i>
    //                 <span>Thêm tệp tin</span>
    //                 <input id="file" type="file" name="files[]" multiple>
    //             </span>
    //             <span class="fileupload-process"></span>
    //         </div>
    //         <!-- The global progress state -->
    //         <div class="col-lg-5 fileupload-progress fade">
    //             <!-- The global progress bar -->
    //             <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
    //                 <div class="progress-bar progress-bar-success" style="width:0%;"></div>
    //             </div>
    //             <!-- The extended global progress state -->
    //             <div class="progress-extended">&nbsp;</div>
    //         </div>
    //     </div>
    //     <table role="presentation" class="table mt-2">
    //         <tbody class="files"></tbody>
    //     </table>
    // </div>
        if(!$(`.edit-client-comment-content-${data_id}`).length){
            content_detail.after(`
            <div class="edit-client-comment-editor">
                <div class="pb-cmnt-container col-md-12">
                    <div class="row">
                        <div class="col-md-12 p-0">
                            <div class="card-info card bg-info mt-0 p-t-20">
                                <div class="panel-body">
                                    <textarea placeholder="Hãy viết bình luận của bạn ở đây!" class="edit-client-comment-content-${data_id} pb-cmnt-textarea"></textarea>
                                    <form class="form-inline">
                                        <a href="javascript:;" class="btn btn-dark closeEditClientComment-${data_id} float-right mt-2 mr-1">Đóng</a>
                                        <a href="javascript:;" data-href="/adcp/support/editclientcomment/${data_id}" class="btn btn-info float-right mt-2 sendEditClientComment-${data_id}" >Sửa</a>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <hr>
                </div>
            </div>
            `)    
        }
        // countFile = 0;
        // fileSupport = [];
        // $('#fileupload-edit-'+data_id).fileupload({
        //     disableImageResize: /Android(?!.*Chrome)|Opera/
        //     .test(window.navigator.userAgent),
        //     acceptFileTypes: /(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i,
        //     maxFileSize: 1024*1024*10,
        //     change: function (e, data) {
        //         data.files.forEach(element => {
        //             if((/(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i).test(element.name) && element.size < 2*1024*1024){
        //                 fileSupport.push(element);
        //                 countFile ++;
        //             }
        //         });
        //         console.log(fileSupport);
        //         console.log(countFile);
        //     },
        // });
        // $('#fileupload-edit-'+data_id).on('click','.btn-cancel2',function (e) {
        //     e.preventDefault();
        //     let tr = $(this).parents('tr');
        //     let name = tr.find('td:eq(1)').text().trim();
        //     let index = fileSupport.findIndex((value)=>{
        //         return value.name === name;                                    
        //     });
        //     tr.remove();
        //     fileSupport.splice(index, 1);
        //     countFile --;                                                     
        // });
        
        $(`.edit-client-comment-content-${data_id}`).html(content_old.trim());
        
        $('.sendEditClientComment-'+data_id).off().click(function (e) { 
            e.preventDefault();
            let href = $(this).attr('data-href');
            let edittor = $(this).parents('.edit-client-comment-editor');
            let data = new FormData();
            let content = $('.edit-client-comment-content-'+data_id).val();
            if(!content && !fileSupport.length){
                swal({
                    title: "Lỗi !!",
                    text: `<strong class="text-danger"> Không có nội dung</strong>`,
                    type: "error",
                    html: true
                });
            }else{
                if(fileSupport.length){
                    fileSupport.forEach((file,index) => {
                        if(file.size){
                            data.append('file'+index, file);
                        }
                    });
                }
                data.append('content',content);
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let comment = results.comment;
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        if(comment.file!='[]' && comment.file){
                            let json = JSON.parse(comment.file) ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row">`
                                json.forEach((element)=>{
                                    if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                        }
                        content_detail.html(`
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="/images/hnn-avatar.png" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-light btn-sm dropdown-toggle waves-effect" data-toggle="dropdown" aria-expanded="true">
                                            Thêm
                                            <span class="caret m-l-5"></span>
                                        </button>
                                        <div class="dropdown-menu" style="font-size: 10px;">
                                            <a class="dropdown-item editClientComment" data-d="${comment.id}" href="javascript: void(0);">Chỉnh sửa</a>
                                            <a class="dropdown-item delete-client-comment" href="/adcp/support/deleteclientcomment/${comment.id}">Xóa</a>
                                        </div>
                                    </div>
                                    ${moment().format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${results.name}</h6>
                                    <small class="text-muted">From: ${results.email}</small>
                                </div>
                            </div>
                            <article>
                                ${comment.content}
                            </article>
                            ${file_content}
                            <hr>
                        `);
                        fileSupport = [];
                        edittor.remove();
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });     
            }
        });

        $('.closeEditClientComment-'+data_id).off().click(function(e){
            e.preventDefault();
            $(this).parents('.edit-client-comment-editor').remove();

        })
    });

    page.on('click','.tb_image a', function (e) {
        e.preventDefault();
        let modalSD = $('#modalSider');
        let tr = $(this).parents('tr');
        let slider = tr.find('.tb_file').html();
        slider = slider ? JSON.parse(slider) : [];
        $('#sider-iamge .carousel-inner').html('');
        slider.forEach((element,index) => {
            if(index==0){
                if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                    $('#sider-iamge .carousel-inner').append(`
                        <div class="carousel-item active mt-5 mb-5">
                            <a href="/files/support/${element}">
                                <img class="d-block img-fluid" src="/files/support/${element}" alt="">
                            </a>
                        </div>
                    `)
                }else{
                    $('#sider-iamge .carousel-inner').append(`
                        <div class="carousel-item active mt-5 mb-5">
                            <a href="/files/support/${element}">
                                <img class="d-block img-fluid" src="/files/file.png" alt="">
                                <p class="title-file">${element}</p>
                            </a>
                        </div>
                    `)
                }          
            }else{
                if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                    $('#sider-iamge .carousel-inner').append(`
                        <div class="carousel-item mt-5 mb-5">
                            <a href="/files/support/${element}">
                                <img class="d-block img-fluid" src="/files/support/${element}" alt="">
                            </a>
                        </div>
                    `);
                }else{
                    $('#sider-iamge .carousel-inner').append(`
                        <div class="carousel-item mt-5 mb-5">
                            <a href="/files/support/${element}">
                                <img class="d-block img-fluid" src="/files/file.png" alt="">
                                <p class="title-file">${element}</p>
                            </a>
                        </div>
                    `);
                }
            }
        });
        $('#sider-iamge').on('slid.bs.carousel', function (e) {
            let item = $(e.relatedTarget);
            let height = item.height();
            item.css('padding-bottom', (600 - height)/2);
            item.css('padding-top', (600 - height)/2);
            $('#sider-iamge .carousel-item').removeClass('mt-5').removeClass('mb-5');
        }) 
        modalSD.modal('show');
    });

    page.on('click', '#support .editSupport', function (e) {
        e.preventDefault();
        let modalSP = $('#modalEditSupport')
        let _this = $(this);
        let form = $('#modalEditSupport form');
        let table = $('#support');

        modalSP.modal('show');
        form.find('input, textarea, select').val('');

        let tr = $(this).parents('tr');
        let href = $(this).attr('data-href');
        let id = $(this).attr('data-id');
        let client_name = tr.find('td span.tb_clientName').html().trim();
        let ticket = tr.find('td span.tb_ticket').text().trim();
        let req_package = tr.find('td span.tb_reqPackage').text().trim();
        let only_content = tr.find('td span.tb_content').text().trim();
        let content = tr.find('td span.tb_allContent').html();
        content = content ? JSON.parse(content) : [];
        let assign_person_id = tr.find('td span.tb_assignPerson').html();
        assign_person_id = assign_person_id ? JSON.parse(assign_person_id) : [];
        let deadline = tr.find('td span.tb_deadline').text().trim();
        let date_assign = tr.find('td span.tb_dateAssign').text().trim();
        let department_name = tr.find('td span.tb_departmentName').text();
        let progress = tr.find('td span.tb_progress').text();
        let note = tr.find('td span.tb_note').text();
        let file = tr.find('td span.tb_file').text();
        file = file ? JSON.parse(file) : [];
        let priority = tr.find('td span.tb_priority').html();
        let department_other = tr.find('td span.tb_departmentOther').text();
        let created_at = tr.find('td span.tb_createAt').text();
        let des_assign = tr.find('td span.tb_desAssign').text();
        let main_assign_person  = tr.find('td span.tb_mainAssignPerson').html();
        main_assign_person = main_assign_person ? JSON.parse(main_assign_person) : []; 
        let department = department_other ? JSON.parse(department_other) : department_name;
        
        $('.content-support').html('');        
        for (let index in content) {
            if(getContentSupport(index)){
                if(index !== 'file'){
                    $('.content-support').append(`
                        <div class="col-md-12 m-t-5 m-b-5 float-left">
                            <div class="col-4 float-left"><i class="fa fa-location-arrow m-r-14" aria-hidden="true"></i><span class="text-danger">${getContentSupport(index)}</span></div>
                            <div class="col-8 float-left">:<strong class="text-dark m-l-10">${content[index]}</strong></div>
                        </div>
                    `);
                }else{                    
                    JSON.parse(content.file).forEach((item, key) => {
                        let file_item;
                        if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(item)){
                            file_item = `<img width="100px" src="/files/support/${file[key]}" alt="">`;
                        }else{
                            file_item = item;
                        }
                        $('.content-support').append(`
                            <div class="col-md-12 m-t-5 m-b-5 float-left">
                                <div class="col-4 float-left"><i class="fa fa-location-arrow m-r-14" aria-hidden="true"></i><span class="text-danger">${getContentSupport(index)}</span></div>
                                <div class="col-8 float-left">:<strong class="text-dark m-l-10"><a target="_blank" href="/files/support/${file[key]}">${file_item}</a></strong></div>
                            </div>
                        `);
                    });
                }
            }
        }

        form.attr('action', href);
        form.find('.client_name').html(client_name);
        form.find('.package_name').html(ticket);
        form.find('.req_packge_name').html(req_package);
        form.find('.created_at').html(created_at);
        form.find('.date_assign').html(date_assign);
        form.find('#des_assign').val(des_assign);
        
        form.find('.department_name').html(department);
        form.find('.value_progress').html(progress?progress+'%':'0%');
        $('#progress').css('width',progress?progress+'%':'0%');
        form.find('.note_support').html(note?note:'Không có');
        form.find('.priority').html(priority);

        $('#assign_person_id').unbind().change(function (e) { 
            e.preventDefault();
            let _this = $(this);
            let person = _this.val();
            if(person.length){
                $('#main_assgin_person .groupBox').html('');
                $('#main_assgin_person').removeClass('hidden');
                person.forEach(element => {
                    let name = $(`#assign_person_id option[value="${element}"]`).text();
                    $('#main_assgin_person .groupBox').append(`
                        <div class="checkbox">
                            <label><input type="checkbox" name="main_assign_person[]" data-id="${element}" value="${element}"> ${name}</label>
                        </div>
                    `);
                });
            }else{
                $('#main_assgin_person').addClass('hidden');
                $('#main_assgin_person .groupBox').html('');
            }
        });
        
        if(assign_person_id.length) {
            $('#assign_person_id').val(assign_person_id).trigger('change');
        }

        main_assign_person.forEach(element => {
           $(`#main_assgin_person input[value="${element}"]`).attr('checked',true); 
        });

        $('#assign_person_id').change(function (e) { 
            e.preventDefault();
            if(!$(this).val()){
                $('#deadline').val('');
            }
        });

        if(deadline){
            form.find('#deadline').val(moment(deadline, 'DD-MM-YYYY HH:mm').format('DD-MM-YYYY HH:mm'));
        }

        countFile = 0;
        fileSupport = [];
        
        if($('#fileupload').length){
            $('#fileupload').fileupload({
                disableImageResize: /Android(?!.*Chrome)|Opera/
                .test(window.navigator.userAgent),
                acceptFileTypes: /(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i,
                maxFileSize: 1024*1024*2,
                change: function (e, data) {
                    data.files.forEach(element => {
                        if((/(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i).test(element.name) && element.size < 2*1024*1024){
                            fileSupport.push(element);
                            countFile ++;
                        }
                    });
                    console.log(fileSupport);
                    console.log(countFile);                                    
                },
            });
            $('#fileupload').on('click','.btn-cancel2',function (e) {
                e.preventDefault();
                let tr = $(this).parents('tr');
                let name = tr.find('td:eq(1)').text().trim();
                let index = fileSupport.findIndex((value)=>{
                    return value.name === name;                                    
                });
                tr.remove();
                fileSupport.splice(index, 1);
                countFile --;                                                     
            });
        }

        $.ajax({
            type: "GET",
            url: '/adcp/support/getcomment/'+id,
            data: "",
            dataType: "json",
            success: function (results) {
                let comment = results.comment;
                if(!comment.length){
                    $('.comment').html('<div class="col-md-12"><p class="text-danger">Không có bình luận nào ?</p></div>');
                }else{
                    $('.comment').html('');
                    comment.forEach((element)=>{
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        
                        if(element.file != '[]' && element.file){
                            let json = JSON.parse(element.file) ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row file-detail">`
                                json.forEach((element)=>{
                                    if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                                
                        }
                        let editComment = '';
                        $('.comment').append(`
                        <div class="comment-detail">
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="/images/hnn-avatar.png" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    ${moment(element.created_at).format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${element.name}</h6>
                                    <small class="text-muted">From: ${element.user_name}</small>
                                </div>
                            </div>
            
                            <article>
                                ${element.content}
                            </article>
                            ${file_content}
                            <hr/>
                        </div>
                        `);
                    })
                }

            }
        });

        $.ajax({
            type: "GET",
            url: '/adcp/support/getmessage/'+id,
            data: "",
            dataType: "json",
            success: function (results) {
                $("#preloader").fadeOut();
                let message = results.message;
                let name = '';
                let email = '';
                let clientObj = results.client;
                let userObj = results.user;
                if(!message.length){
                    $('.message-client').html('<p class="text-danger">Không có bình luận nào !</p>');
                }else{
                    $('.content-message').show()
                    $('.message-client').html('');
                    message.forEach((element)=>{
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        if(element.type_user == 2){
                            let user = userObj.find((el)=>{                                
                                return message.user_id = el.id;
                            });                            
                            name = user.fullname;
                            email = user.email;
                        }else if(element.type_user == 3){
                            let client = clientObj.find((el)=>{
                                return message.user_id = el.id;
                            });
                            name = client.name;
                            email = client.email;
                        }
                        
                        if(element.file != '[]' && element.file){
                            let json = JSON.parse(element.file) ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row file-detail">
                            `;
                            json.forEach((element)=>{
                                if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                                    file_content += `<div class="col-sm-2">
                                    <a href="${path_file + element}">
                                        <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                    </div>`
                                }else{
                                    file_content += `<div class="col-sm-4">
                                    <a style="font-size : 50px" href="${path_file + element}">
                                        <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                        <a href ="${path_file + element}" ><p>${element}</p></a>
                                    </div>`
                                }
    
                            });
                            file_content+= `</div>`;
                        }
                        $('.message-client').append(`
                        <div class="message-detail">
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="/images/hnn-avatar.png" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    ${moment(element.created_at).format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${name}</h6>
                                    <small class="text-muted">From: ${email}</small>
                                </div>
                            </div>
                            <article>
                                ${element.content}
                            </article>
                            ${file_content}
                            <hr/>
                        </div>
                        `);
                    })
                }
            }
        });
                
        form.validator('update');
        $('#deadline').datetimepicker({
            format: 'DD-MM-YYYY HH:mm',
        });

        $('#assign_person_id').select2({
            placeholder: "Chọn...",
            allowClear: true
        });

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let support = results.support;
                        let assign_person = '';
                        let file_image = support.file ? JSON.parse(support.file) : [];
                        let image = '';
                        file_image.forEach(element => {
                            if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                                image =  `<a href="/files/support/${element}"><img style="width: 60px" src="/files/support/${element}" alt=""></a>`;
                                return;
                            }
                        });
                        let assign_person_save = '';
                        if(form.find('#assign_person_id option:selected').val()){
                            form.find('#assign_person_id option:selected').each(function(index){
                                if(index === 0){
                                    assign_person_save += `<a class='text-primary btnShowUser' href='javascript:;' data-id='${$(this).val()}'>${$(this).text()};</a>`;
                                }else{
                                    assign_person_save += `<br><a class='text-primary btnShowUser' href='javascript:;' data-id='${$(this).val()}'>${$(this).text()};</a>`;
                                }
                            });            
                        }
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            `<span class="tb_ticket">${ticket }</span>`,
                            `<span class="tb_reqPackage">${ req_package }</span>`,
                            `<span class="tb_clientName">${ client_name }</span>`,
                            `<span class="tb_content">${ only_content }</span>`,
                            `<span class="tb_image">${image}</span>`,
                            `<span class="tb_priority">${ priority }</span>`,
                            `<span class="tb_createAt">${ created_at }</span>`,
                            `<span><span class="hidden tb_assignPerson">${support.assign_person_id}</span>${ assign_person_save }</span>`,
                            `<span class="tb_dateAssign">${ support.date_assign ? moment(support.date_assign).format('DD-MM-YYYY HH:mm:ss') : '' }</span>`,
                            `<span class="tb_deadline">${ support.deadline ? moment(support.deadline).format('DD-MM-YYYY HH:mm:ss') : '' }</span>`,
                            `<span class="tb_status">${ getStatusSupport(parseInt(support.status)) }</span>`,
                            `<a class="btn btn-primary btn-sm mt-1 mb-1 editSupport" href="javascript:;" data-href="/adcp/support/assign/${support.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm mt-1 mb-1" data-id=${support.id} obj="Yêu cầu" href="/adcp/support/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            `<span class="tb_allContent">${ support.content }</span>`,
                            `<span class="tb_departmentName">${ department_name }</span>`,
                            `<span class="tb_progress">${ support.progress }</span>`,
                            `<span class="tb_note">${ support.note }</span>`,
                            `<span class="tb_file">${ support.file }</span>`,
                            `<span class="tb_departmentOther">${ department_other }</span>`,
                            `<span class="tb_mainAssignPerson">${ support.main_assign_person }</span>`,
                            `<span class="tb_desAssign">${ des_assign }</span>`
                        ], tr, undefined, false, false);
                        swal("Thành công !!!", `Cập nhật thành công !!!`, "success");
                        sendPoliEmail({
                            title: results.title,
                            users: results.users,
                            body: results.body,
                        });
                        modalSP.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalSP.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalSP.off();
        });
    });

    page.on('click','.btnShowUser', function (e) {
        e.preventDefault();
        let _this = $(this);
        let id = _this.attr('data-id');
        $.ajax({
            type: "GET",
            url: "/adcp/support/getuser/"+id,
            data: "",
            dataType: "json",
            success: function (results) {
                let user = results.user;
                $('#showPersonAssign').removeClass('hidden');
                $('#name_person').val(user.fullname);
                $('#email_person').val(user.email);
                $('#phone_person').val(user.mobile); 
                $(document).off();               
                $('#showPersonAssign .close').click(function (e) {
                    $('#showPersonAssign').addClass('hidden');
                })
            }
        });
    });

    page.on('click','.btnShowClient', function (e) {
        e.preventDefault();
        let _this = $(this);
        let id = _this.attr('data-id');
        $.ajax({
            type: "GET",
            url: "/adcp/support/getclient/"+id,
            data: "",
            dataType: "json",
            success: function (results) {
                let client = results.client;
                $('#showClientAssign').removeClass('hidden');
                $('#name_client').val(client.name);
                $('#email_client').val(client.email);
                $('#phone_client').val(client.phone);
                $('#department_client').val(client.department_name);
                $('#address_client').val(client.address);
                $('#phone_client').val(client.phone); 
                $(document).off();               
                $('#showClientAssign .close').click(function (e) {
                    $('#showClientAssign').addClass('hidden');
                })
            }
        });
    });

    //Show modal My Support
    page.on('click', '#mysupport .editMySupport', function (e) {
        e.preventDefault();

        let modalSP = $('#modalEditMySupport')
        let _this = $(this);
        let form = $('#modalEditMySupport form');
        let table = $('#mysupport');

        modalSP.modal('show');
        form.find('input, textarea, select').val('');

        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let id = $(this).attr('data-id');
        let client_name = tr.find('td span.tb_clientName').text().trim();
        let ticket = tr.find('td span.tb_ticket').text().trim();
        let req_package = tr.find('td span.tb_reqPackage').html();
        let only_content = tr.find('td span.tb_content').text().trim();
        let content = tr.find('td span.tb_allContent').html();
        content = content ? JSON.parse(content) : [];
        let user_assign_id = tr.find('td span.tb_assignUser').html();
        let user_assign = tr.find('td span.tb_assignUser').html().trim();
        let deadline = tr.find('td span.tb_deadline').text().trim();        
        let date_assign = tr.find('td span.tb_dateAssign').text().trim();
        let department_name = tr.find('td span.tb_departmentName').text();
        let progress = tr.find('td span.tb_progress').text();
        let note = tr.find('td span.tb_note').text();
        let file = tr.find('td span.tb_file').text();
        file = file ? JSON.parse(file) : [];
        let priority = tr.find('td span.tb_priority').html();
        let department_other = tr.find('td span.tb_departmentOther').text();
        let created_at = tr.find('td span.tb_createAt').text();
        let status = tr.find('td span.tb_status').attr('data-id');
        let des_assign = tr.find('td span.tb_desAssign').html();
        let main_assign_person  = tr.find('td span.tb_mainAssignPerson').html();
        let assign_person_id = tr.find('td span.tb_assignPerson').html();
        let department = department_other ? department_other : department_name;
        $('.content-support').html('');        
        for (let index in content) {
            if(getContentSupport(index)){
                if(index !== 'file'){
                    $('.content-support').append(`
                        <div class="col-md-12 m-t-5 m-b-5 float-left">
                            <div class="col-4 float-left"><i class="fa fa-location-arrow m-r-14" aria-hidden="true"></i><span class="text-danger">${getContentSupport(index)}</span></div>
                            <div class="col-8 float-left">:<strong class="text-dark m-l-10">${content[index]}</strong></div>
                        </div>
                    `);
                }else{                    
                    JSON.parse(content.file).forEach((item, key) => {
                        let file_item;
                        if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(item)){
                            file_item = `<img width="100px" src="/files/support/${file[key]}" alt="">`;
                        }else{
                            file_item = item;
                        }
                        $('.content-support').append(`
                            <div class="col-md-12 m-t-5 m-b-5 float-left">
                                <div class="col-4 float-left"><i class="fa fa-location-arrow m-r-14" aria-hidden="true"></i><span class="text-danger">${getContentSupport(index)}</span></div>
                                <div class="col-8 float-left">:<strong class="text-dark m-l-10"><a target="_blank" href="/files/support/${file[key]}">${file_item}</a></strong></div>
                            </div>
                        `);
                    });
                }
            }
        }

        form.attr('action', href);
        form.find('.client_name').html(client_name);
        form.find('.package_name').html(ticket);
        form.find('.req_packge_name').html(req_package);
        form.find('.created_at').html(created_at);
        form.find('.date_assign').html(date_assign);
        form.find('.person_assign').html(assign_person_id);
        form.find('.main_assign').html(main_assign_person);
        form.find('.user_assign').html(user_assign);
        if(deadline){
            form.find('.deadline').html(moment(deadline, 'DD-MM-YYYY HH:mm').format('DD-MM-YYYY HH:mm'));
        }
        
        form.find('.note_mysupport').html(note?note:'Không có');
        $('#status').val(status);
        form.find('#progress').val(progress);
        form.find('.priority').html(priority);
        form.find('.department_name').html(department);
        form.find('.content-assign article').html(des_assign);

        countFile = 0;
        fileSupport = [];
        
        if($('#fileupload').length){
            $('#fileupload').fileupload({
                disableImageResize: /Android(?!.*Chrome)|Opera/
                .test(window.navigator.userAgent),
                acceptFileTypes: /(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i,
                maxFileSize: 1024*1024*2,
                change: function (e, data) {
                    data.files.forEach(element => {
                        if((/(\.|\/)(gif|jpe?g|png|zip|docx|xlsx|xls|doc)$/i).test(element.name) && element.size < 2*1024*1024){
                            fileSupport.push(element);
                            countFile ++;
                        }
                    });                                 
                },
            });
            $('#fileupload').on('click','.btn-cancel2',function (e) {
                e.preventDefault();
                let tr = $(this).parents('tr');
                let name = tr.find('td:eq(1)').text().trim();
                let index = fileSupport.findIndex((value)=>{
                    return value.name === name;                                    
                });
                tr.remove();
                fileSupport.splice(index, 1);
                countFile --;                                                     
            });
        }

        $.ajax({
            type: "GET",
            url: '/adcp/support/getcomment/'+id,
            data: "",
            dataType: "json",
            success: function (results) {
                let comment = results.comment;
                if(!comment.length){
                    $('.comment').html('<p id="empty_comment" class="text-danger">Không có bất kỳ bình luận nào !</p>');
                }else{
                    $('.comment').html('');
                    comment.forEach((element)=>{
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        
                        if(element.file != '[]' && element.file){
                            let json = element.file ? JSON.parse(element.file) : [] ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row file-detail">`
                                json.forEach((element)=>{
                                    if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                                
                        }
                        let editComment = '';
                        if(element.user_id === login_user_id){
                            editComment = `<div class="btn-group">
                                <button type="button" class="btn btn-light btn-sm dropdown-toggle waves-effect" data-toggle="dropdown" aria-expanded="false">
                                    Thêm
                                    <span class="caret m-l-5"></span>
                                </button>
                                <div class="dropdown-menu" style="font-size: 10px;">
                                    <a class="dropdown-item editComment" data-id="${element.id}"  href="javascript:;">Chỉnh sửa</a>
                                    <a class="dropdown-item delete-comment"  href="/adcp/support/deletecomment/${element.id}">Xóa</a>
                                </div>
                            </div>`
                        }
                        $('.comment').append(`
                        <div class="comment-detail">
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="/images/hnn-avatar.png" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    ${editComment}
                                    ${moment(element.created_at).format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${element.name}</h6>
                                    <small class="text-muted">From: ${element.user_name}</small>
                                </div>
                            </div>
            
                            <article>
                                ${element.content}
                            </article>
                            ${file_content}
                            <hr/>
                        </div>
    
                        `);
                    })
                }
            }
        });

        $.ajax({
            type: "GET",
            url: '/adcp/support/getmessage/'+id,
            data: "",
            dataType: "json",
            success: function (results) {
                let message = results.message;
                let name = '';
                let email = '';
                let avatar = '';
                if(!message.length){
                    $('.message-client').html('<p id="empty_comment" class="text-danger">Không có bất kỳ bình luận nào !</p>');
                }else{
                    $('.message-client').html('');
                    message.forEach((element)=>{
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';                   
                        if(element.type_user == 2){
                            
                            
                            let user = results.user.find((el)=>{                                
                                return el.id  === element.user_id;
                            });                            
                            name = user.fullname;
                            email = user.email;
                            avatar = user.avatar;
                            console.log(user);
                        }else if(element.type_user == 3){
                            let client = results.client.find((el) => {
                                return el.id === element.user_id;
                            });
                            name = client.name;
                            email = client.email;
                            avatar = client.avatar;
                        }
                        
                        if(element.file != '[]' && element.file){
                            let json = element.file ? JSON.parse(element.file) : [] ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row file-detail">`
                                json.forEach((element)=>{
                                    if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                                
                        }
                        let editComment = '';
                        if(element.type_user == 2 && element.user_id === login_user_id){
                            editComment = `<div class="btn-group">
                                <button type="button" class="btn btn-light btn-sm dropdown-toggle waves-effect" data-toggle="dropdown" aria-expanded="false">
                                    Thêm
                                    <span class="caret m-l-5"></span>
                                </button>
                                <div class="dropdown-menu" style="font-size: 10px;">
                                    <a class="dropdown-item editClientComment" data-id="${element.id}"  href="javascript:;">Chỉnh sửa</a>
                                    <a class="dropdown-item delete-client-comment"  href="/adcp/support/deleteclientcomment/${element.id}">Xóa</a>
                                </div>
                            </div>`
                        }
                        $('.message-client').append(`
                        <div class="message-detail">
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="${avatar ? '/files/avatar/'+avatar : '/images/hnn-avatar.png'}" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    ${editComment}
                                    ${moment(element.created_at).format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${name}</h6>
                                    <small class="text-muted">From: ${email}</small>
                                </div>
                            </div>
            
                            <article>
                                ${element.content}
                            </article>
                            ${file_content}
                            <hr/>
                        </div>
    
                        `);
                    })
                }
            }
        });

        $('#tabComment a').on('click', function (e) {
            e.preventDefault()
            $(this).tab('show')
        })
        
        $('#frmEditMySupport  .sendCommnet').off().click(function (e) { 
            e.preventDefault();
            let data = new FormData();
            let content = $('.content-comment').val();
            
            if(!content && !fileSupport.length){
                swal({
                    title: "Lỗi !!",
                    text: `<strong class="text-danger"> Không có nội dung</strong>`,
                    type: "error",
                    html: true
                });
            }else{
                if(fileSupport.length){
                    fileSupport.forEach((file,index) => {
                        if(file.size){
                            data.append('file'+index, file);
                        }
                    });
                }
                data.append('content',content);
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: "/adcp/support/sendcomment/"+id,
                    data: data,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        if($('#empty_comment').length){
                            $('.comment').html('');
                        }
                        let comment = results.comment;
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        if(comment.file!='[]' && comment.file){
                            let json = comment.file ? JSON.parse(comment.file) : [] ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row">`
                                json.forEach((element)=>{
                                    if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                        }
                        $('.comment').append(`
                        <div class="comment-detail">
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="/images/hnn-avatar.png" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-light btn-sm dropdown-toggle waves-effect" data-toggle="dropdown" aria-expanded="false">
                                                                        Thêm
                                                                        <span class="caret m-l-5"></span>
                                                                    </button>
                                        <div class="dropdown-menu" style="font-size: 10px;">
                                            <a class="dropdown-item editComment" data-id="${comment.id}" href="javascript: void(0);">Chỉnh sửa</a>
                                            <a class="dropdown-item delete-comment" href="/adcp/support/deletecomment/${comment.id}">Xóa</a>
                                        </div>
                                    </div>
                                    ${moment().format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${results.name}</h6>
                                    <small class="text-muted">From: ${results.email}</small>
                                </div>
                            </div>
            
                            <article>
                                ${comment.content}
                            </article>
                            ${file_content}
                            <hr/>
                        </div>

                        `);
                        $('.content-comment').val('');
                        $('#fileupload .files').html('');
                        fileSupport = [];
                        countFile = 0;
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });     
            }
        });

        $('#frmEditMySupport  .sendClientComment').off().click(function (e) { 
            e.preventDefault();
            let data = new FormData();
            let content = $('.content-comment-client').val();
            if(!content && !fileSupport.length){
                swal({
                    title: "Lỗi !!",
                    text: `<strong class="text-danger"> Không có nội dung</strong>`,
                    type: "error",
                    html: true
                });
            }else{
                if(fileSupport.length){
                    fileSupport.forEach((file,index) => {
                        if(file.size){
                            data.append('file'+index, file);
                        }
                    });
                }
                data.append('content',content);
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: "/adcp/support/sendclientcomment/"+id,
                    data: data,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        if($('#empty_client_comment').length){
                            $('.message-client').html('');
                        }
                        let comment = results.comment;
                        let count_file = 0;
                        let path_file = '/files/support/';
                        let file_content = '';
                        if(comment.file!='[]' && comment.file){
                            let json = comment.file ? JSON.parse(comment.file) : [] ;
                            count_file = json.length;
                            file_content = `
                                <h6 class="mb-0">
                                    <i class="fa fa-paperclip mb-2"></i> Tệp tin
                                    <span>(${count_file})</span>
                                </h6>
                                <div class="row">`
                                json.forEach((element)=>{
                                    if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                                        file_content += `<div class="col-sm-2">
                                        <a href="${path_file + element}">
                                            <img src="${path_file + element}" alt="${element}" class="img-thumbnail img-responsive"> </a>
                                        </div>`
                                    }else{
                                        file_content += `<div class="col-sm-4">
                                        <a style="font-size : 50px" href="${path_file + element}">
                                            <i class="fa fa-file-o text-danger" aria-hidden="true"></i> </a>
                                            <a href ="${path_file + element}" ><p>${element}</p></a>
                                        </div>`
                                    }
    
                                });
                                file_content+= `</div>`;
                        }
                        $('.message-client').append(`
                        <div class="message-detail">
                            <div class="media mb-4 mt-1">
                                <img class="d-flex mr-3 rounded-circle thumb-sm" src="${results.avatar?'/files/avatar/'+results.avatar :'/images/hnn-avatar.png'}" alt="">
                                <div class="media-body">
                                    <span class="pull-right">
                                    <div class="btn-group">
                                        <button type="button" class="btn btn-light btn-sm dropdown-toggle waves-effect" data-toggle="dropdown" aria-expanded="false">
                                                                        Thêm
                                                                        <span class="caret m-l-5"></span>
                                                                    </button>
                                        <div class="dropdown-menu" style="font-size: 10px;">
                                            <a class="dropdown-item editClientComment" data-id="${comment.id}" href="javascript: void(0);">Chỉnh sửa</a>
                                            <a class="dropdown-item delete-client-comment" href="/adcp/support/deleteclientcomment/${comment.id}">Xóa</a>
                                        </div>
                                    </div>
                                    ${moment().format('DD/MM/YYYY HH:mm')}</span>
                                    <h6 class="m-0">${results.name}</h6>
                                    <small class="text-muted">From: ${results.email}</small>
                                </div>
                            </div>
            
                            <article>
                                ${comment.content}
                            </article>
                            ${file_content}
                            <hr/>
                        </div>

                        `);
                        $('.content-comment-client').val('');
                        $('#fileupload .files').html('');
                        fileSupport = [];
                        countFile = 0;
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });     
            }
        });

        form.validator('update');
        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = []
                data = form.serializeArray();
                $("#preloader").fadeIn();               
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let support = results.mysupport;
                        let file_image = support.file ? JSON.parse(support.file) : [];
                        let image = '';
                        file_image.forEach(element => {
                            if((/(\.|\/)(gif|jpe?g|png)$/i).test(element)){
                                image =  `<a href="/files/support/${element}"><img style="width: 60px" src="/files/support/${element}" alt=""></a>`;
                                return;
                            }
                        });
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            `<span class="tb_ticket">${ticket }</span>`,
                            `<span class="tb_reqPackage">${ req_package }</span>`,
                            `<span class="tb_clientName">${ client_name }</span>`,
                            `<span class="tb_content">${ only_content }</span>`,
                            `<span class="tb_image">${image}</span>`,
                            `<span class="tb_priority">${ priority }</span>`,
                            `<span class="tb_createAt">${ created_at }</span>`,
                            `<span class="tb_assignUser" data-id="${support.user_assign_id}">${ user_assign }</span>`,
                            `<span class="tb_dateAssign">${ moment(support.date_assign).format('DD-MM-YYYY HH:mm:ss') }</span>`,
                            `<span class="tb_deadline">${ deadline }</span>`,
                            `<span class="tb_status" data-id="${support.status}">${ getStatusMySupport(parseInt(support.status)) }</span>`,
                            `<a class="btn btn-primary btn-sm mt-1 mb-1 editMySupport" href="/adcp/support/dosupport/${support.id}">
                                <i class="fa fa-edit"></i>
                            </a>`,
                            `<span class="tb_allContent">${ support.content }</span>`,
                            `<span class="tb_departmentName">${ department_name }</span>`,
                            `<span class="tb_progress">${ support.progress }</span>`,
                            `<span class="tb_note">${ support.note }</span>`,
                            `<span class="tb_file">${ support.file }</span>`,
                            `<span class="tb_departmentOther">${ department_other }</span>`,
                            `<span class="tb_desAssign">${ des_assign }</span>`,
                            `<span class="tb_mainAssignPerson">${ main_assign_person }</span>`,
                            `<span class="tb_assignPerson">${ assign_person_id }</span>`
                        ], tr, undefined, false, false);
                        swal("Thành công !!!", `Cập nhật thành công !!!`, "success");
                        modalSP.modal('hide');
                        tinyMCE.activeEditor.setContent('');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalSP.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalSP.off();
        });
    });

    //Show modal Department
    page.on('click', '#department .editDepartment', function (e) {
        e.preventDefault();

        let modalDM = $('#modalEditDepartment')
        let _this = $(this);
        let form = $('#modalEditDepartment form');
        let table = $('#department');

        modalDM.modal('show');
        form.find('input, textarea, select').val('');

        let tr = $(this).parents('tr');
        let href = $(this).attr('data-href');
        let name = tr.find('td:eq(1)').text();
        let description = tr.find('td:eq(2)').text();
        let phone = tr.find('td:eq(3)').text();
        let email = tr.find('td:eq(4)').text();
        let status = tr.find('td:eq(5)').find('span').attr('status');

        form.attr('action', href);
        modalDM.find('#name').val(name);
        modalDM.find('#description').val(description);
        modalDM.find('#phone').val(phone);
        modalDM.find('#email').val(email);
        modalDM.find('#status').val(status);
        modalDM.find('.modal-title').text('Cập nhật đơn vị');
        modalDM.find('.modal-footer button[type="submit"]').text('Cập nhật');

        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let departmentObj = results.department;
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            departmentObj.name,
                            departmentObj.description,
                            departmentObj.phone,
                            departmentObj.email,
                            function () {
                                if(departmentObj.status == 1){
                                    return `<span status="${departmentObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${departmentObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editDepartment" href="javascript:;" data-href="/adcp/department/edit/${departmentObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${departmentObj.id} obj="Đơn vị" href="/adcp/department/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Đơn vị cập nhật thành công !!`, "success");
                        modalDM.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalDM.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalDM.off();
        });
    });
    page.on('click', '.addDepartment', function (e) {
        e.preventDefault();

        let modalDM = $('#modalEditDepartment')
        let href = $(this).attr('href');
        let table = $('#department');
        let form = $('#modalEditDepartment form');
        modalDM.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');
        modalDM.find('.modal-title').text('Thêm đơn vị');
        modalDM.find('.modal-footer button[type="submit"]').text('Thêm');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let departmentObj = results.department;
                        table.dataTable().fnAddData([
                            '',
                            departmentObj.name,
                            departmentObj.description,
                            departmentObj.phone,
                            departmentObj.email,
                            function () {
                                if(departmentObj.status == 1){
                                    return `<span status="${departmentObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${departmentObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editDepartment" href="javascript:;" data-href="/adcp/department/edit/${departmentObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${departmentObj.id} obj="Đơn vị" href="/adcp/department/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,      
                        ]);
                        swal("Đơn vị !!", `Thêm đơn vị thành công !!`, "success");
                        modalDM.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "lỗi !!",
                                text: `<strong class="text-danger">Lỗi không xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalDM.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalDM.off();
        });
    });

    //Show modal Method
    page.on('click', '#method .editMethod', function (e) {
        e.preventDefault();

        let modalMT = $('#modalEditMethod')
        let _this = $(this);
        let form = $('#modalEditMethod form');
        let table = $('#method');

        modalMT.modal('show');
        form.find('input, textarea, select').val('');

        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let name = tr.find('td:eq(1)').text();
        let content = tr.find('td:eq(2)').text();
        let package_id = tr.find('td:eq(3) span').text();

        form.attr('action', href);
        modalMT.find('#name').val(name);
        modalMT.find('#content').val(content);
        modalMT.find('#package_id').val(package_id);
        modalMT.find('.modal-title').text('Cập nhật phương thức');
        modalMT.find('.modal-footer button[type="submit"]').text('Cập nhật');

        form.validator('update');
        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let methodObj = results.method;
                        let package_name =  modalMT.find('#package_id option:selected').html();
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            methodObj.name,
                            methodObj.content,
                            `<span class="hidden">${methodObj.package_id}</span>${package_name}`,
                            `<a class="btn btn-primary btn-sm m-2-4 editMethod" href="/adcp/method/edit/${methodObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${methodObj.id} obj="Phương thức" href="/adcp/method/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Phương thức được cập nhật thành công !!`, "success");
                        modalMT.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalMT.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalMT.off();
        });
    });
    page.on('click', '.addMethod', function (e) {
        e.preventDefault();
        let modalMT = $('#modalEditMethod')
        let href = $(this).attr('href');
        let table = $('#method');
        let form = $('#modalEditMethod form');
        modalMT.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');
        modalMT.find('.modal-title').text('Thêm phương thức');
        modalMT.find('.modal-footer button[type="submit"]').text('Thêm');
        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let methodObj = results.method;
                        let package_name =  modalMT.find('#package_id option:selected').html();
                        table.dataTable().fnAddData([
                            '',
                            methodObj.name,
                            methodObj.content,
                            `<span class="hidden">${methodObj.package_id}</span>${package_name}`,
                            `<a class="btn btn-primary btn-sm m-2-4 editMethod" href="/adcp/method/edit/${methodObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${methodObj.id} obj="Phương thức" href="/adcp/method/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            
                        ]);
                        swal("Thành công !!", `Phương thức được tạo thành công !!`, "success");
                        modalMT.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalMT.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalMT.off();
        });
    });

    //Show modal Faq
    page.on('click', '#faq .editFaq', function (e) {
        e.preventDefault();

        let modalFaq = $('#modalEditFaq')
        let _this = $(this);
        let form = $('#modalEditFaq form');
        let table = $('#faq');
        $(document).off();

        modalFaq.modal('show');
        $('input').unbind('focus');

        let tr = _this.parents('tr');
        let href = _this.attr('href');
        let package_id = tr.find('td span.tb_package').attr('data-id');
        let ask = tr.find('td span.tb_ask').text();
        let answer = tr.find('td span.tb_answer').html();
        let location = tr.find('td span.tb_location').attr('data-id');
        let status = tr.find('td span.tb_status').attr('data-id');          
        form.attr('action', href);
        
        $('#package_id').val(package_id);
        $('#ask').val(ask);
        $('#answer').val(answer);
        $('#location').val(location);
        $('#status').val(status);
        modalFaq.find('.modal-title').text('Cập nhật câu hỏi');
        modalFaq.find('.modal-footer button[type="submit"]').text('Cập nhật');

        tinymce.init({
            selector: "#answer",
            theme: "modern",
            paste_data_images: true,
            plugins: [
              "advlist autolink lists link image charmap print preview hr anchor pagebreak",
              "searchreplace wordcount visualblocks visualchars code fullscreen",
              "insertdatetime media nonbreaking save table contextmenu directionality",
              "emoticons template paste textcolor colorpicker textpattern"
            ],
            plugins: 'image print preview fullpage searchreplace autolink directionality visualblocks visualchars fullscreen link codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount imagetools contextmenu colorpicker textpattern help',
            toolbar1: 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat | codesample | sizeselect fontselect fontsizeselect | link image | insertfile undo redo | emoticons | code',
            image_advtab: true,
            file_picker_callback: function(callback, value, meta) {
              if (meta.filetype == 'image') {
                $('#upload').trigger('click');
                $('#upload').on('change', function() {
                  var file = this.files[0];
                  var reader = new FileReader();
                  reader.onload = function(e) {
                    callback(e.target.result, {
                      alt: ''
                    });
                  };
                  reader.readAsDataURL(file);
                });
              }
            },
            height: "200",
            templates: [{
              title: 'Test template 1',
              content: 'Test 1'
            }, {
              title: 'Test template 2',
              content: 'Test 2'
            }]
        });
        tinyMCE.activeEditor.setContent(answer);

        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                tinyMCE.triggerSave();
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let faqObj = results.faq;
                        let package_name = $('#package_id option:selected').text();
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            `<td class="align-middle"><span class="tb_package" data-id="${ faqObj.package_id }">${ package_name }</span></td>`,
                            `<td class="align-middle"><span class="tb_ask">${ faqObj.ask }</span></td>`,
                            `<td class="align-middle"><span class="tb_ask">${ faqObj.answer }</span></td>`,
                            function () {
                                if(faqObj.location == 1){
                                    return `<span data-id="${faqObj.location}" class="badge badge-success tb_location" style="font-size: 0.7rem; padding: 0.5rem">Quản trị</span>`;
                                }
                                else if (faqObj.location == 2){
                                    return `<span data-id="${faqObj.location}" class="badge badge-primary tb_location" style="font-size: 0.7rem; padding: 0.5rem">Người dùng</span>`;
                                }else{
                                    return `<span data-id="${faqObj.location}" class="badge badge-info tb_location" style="font-size: 0.7rem; padding: 0.5rem">Tất cả</span>`;
                                }
                            },
                            function () {
                                if(faqObj.status == 1){
                                    return `<span data-id="${faqObj.status}" class="badge badge-success tb_status" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span data-id="${faqObj.status}" class="badge badge-danger tb_status" style="font-size: 0.7rem; padding: 0.5rem">Disabled</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editFaq" href="/adcp/setting/editfaq/${faqObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${faqObj.id} obj="Câu hỏi" href="/adcp/setting/deletefaq">
                                <i class="fa fa-remove"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Dịch vụ được cập nhật thành công !!`, "success");
                        modalFaq.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalFaq.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalFaq.off();
        });
    });
    
    page.on('click', '.addFaq', function (e) {
        e.preventDefault();

        let modalFaq = $('#modalEditFaq')
        let href = $(this).attr('href');
        let table = $('#faq');
        let form = $('#modalEditFaq form');
        modalFaq.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');
        modalFaq.find('.modal-title').text('Thêm câu hỏi');
        modalFaq.find('.modal-footer button[type="submit"]').text('Thêm');
        $(document).off();

        tinymce.init({
            selector: "#answer",
            theme: "modern",
            paste_data_images: true,
            plugins: [
              "advlist autolink lists link image charmap print preview hr anchor pagebreak",
              "searchreplace wordcount visualblocks visualchars code fullscreen",
              "insertdatetime media nonbreaking save table contextmenu directionality",
              "emoticons template paste textcolor colorpicker textpattern"
            ],
            plugins: 'image print preview fullpage searchreplace autolink directionality visualblocks visualchars fullscreen link codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount imagetools contextmenu colorpicker textpattern help',
            toolbar1: 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat | codesample | sizeselect fontselect fontsizeselect | link image | insertfile undo redo | emoticons | code',
            image_advtab: true,
            file_picker_callback: function(callback, value, meta) {
              if (meta.filetype == 'image') {
                $('#upload').trigger('click');
                $('#upload').on('change', function() {
                  var file = this.files[0];
                  var reader = new FileReader();
                  reader.onload = function(e) {
                    callback(e.target.result, {
                      alt: ''
                    });
                  };
                  reader.readAsDataURL(file);
                });
              }
            },
            height: "200",
            templates: [{
              title: 'Test template 1',
              content: 'Test 1'
            }, {
              title: 'Test template 2',
              content: 'Test 2'
            }]
        });
        form.validator('update');
        tinyMCE.activeEditor.setContent('');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                tinyMCE.triggerSave();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let faqObj = results.faq;
                        let package_name = $('#package_id option:selected').text();
                        table.dataTable().fnAddData([
                            '',
                            `<td class="align-middle"><span class="tb_package" data-id="${ faqObj.package_id }">${ package_name }</span></td>`,
                            `<td class="align-middle"><span class="tb_ask">${ faqObj.ask }</span></td>`,
                            `<td class="align-middle"><span class="tb_ask">${ faqObj.answer }</span></td>`,
                            function () {
                                if(faqObj.location == 1){
                                    return `<span data-id="${faqObj.location}" class="badge badge-success tb_location" style="font-size: 0.7rem; padding: 0.5rem">Quản trị</span>`;
                                }
                                else if(faqObj.location == 2){
                                    return `<span data-id="${faqObj.location}" class="badge badge-primary tb_location" style="font-size: 0.7rem; padding: 0.5rem">Người dùng</span>`;
                                }else{
                                    return `<span data-id="${faqObj.location}" class="badge badge-info tb_location" style="font-size: 0.7rem; padding: 0.5rem">Tất cả</span>`;
                                }
                            },
                            function () {
                                if(faqObj.status == 1){
                                    return `<span data-id="${faqObj.status}" class="badge badge-success tb_status" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span data-id="${faqObj.status}" class="badge badge-primary tb_status" style="font-size: 0.7rem; padding: 0.5rem">Disabled</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editFaq" href="/adcp/setting/editfaq/${faqObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${faqObj.id} obj="Câu hỏi" href="/adcp/setting/deletefaq">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            
                        ]);
                        swal("Thành công !!", `Câu hỏi được tạo thành công !!`, "success");
                        modalFaq.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalFaq.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalFaq.off();
        });
    });

    //Show modal List Permission
    page.on('click', '#permission .editPermission', function (e) {
        e.preventDefault();
        let modalPM = $('#modalEditPermission')
        let _this = $(this);
        let form = $('#modalEditPermission form');
        let table = $('#permission');
        modalPM.modal('show');
        form.find('input, textarea, select').val('');
        
        

        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let name = tr.find('td:eq(1)').text();
        let description = tr.find('td:eq(2)').text();
        let status = tr.find('td:eq(3)').find('span').attr('status');
        form.attr('action', href);
        modalPM.find('#name').val(name);
        modalPM.find('#description').val(description);
        modalPM.find('#status').val(status);
        modalPM.find('.modal-title').text('Cập nhật quyền');
        modalPM.find('.modal-footer button[type="submit"]').text('Cập nhật');

        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let permissionObj = results.permission;
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            permissionObj.name,
                            permissionObj.description,
                            function () {
                                if(permissionObj.status == 1){
                                    return `<span status="${permissionObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${permissionObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="editPermission btn btn-primary btn-sm m-2-4" href="/adcp/permission/edit/${ permissionObj.id }">
                                <i class="fa fa-edit"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Cập nhật phân quyền thành công !!`, "success");
                        modalPM.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalPM.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalPM.off();
        });
    });
    page.on('click', '.addPermission', function (e) {
        e.preventDefault();

        let modalPM = $('#modalEditPermission')
        let href = $(this).attr('href');
        let table = $('#permission');
        let form = $('#modalEditPermission form');
        modalPM.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');
        modalPM.find('.modal-title').text('Thêm dịch vụ');
        modalPM.find('.modal-footer button[type="submit"]').text('Thêm');
        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                let data = form.serializeArray();
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let permissionObj = results.permission;
                        table.dataTable().fnAddData([
                            '',
                            permissionObj.name,
                            permissionObj.note,
                            function () {
                                if(permissionObj.status == 1){
                                    return `<span status="${permissionObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${permissionObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editpermission" href="/adcp/permission/edit/${permissionObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${permissionObj.id} obj="Quyền" href="/adcp/permission/delete">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            
                        ]);
                        swal("Thành công !!", `Tạo phân quyền thành công !!`, "success");
                        modalPM.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalPM.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalPM.off();
        });
    });

    //Show modal List Group
    page.on('click', '#group .editGroup', function (e) {
        e.preventDefault();
        let modalGr = $('#modalEditGroup')
        let _this = $(this);
        let form = $('#modalEditGroup form');
        let table = $('#group');
        modalGr.modal('show');
        form.find('input, textarea, select').val('');
        form.find('input[type="checkbox"]').prop( "checked", false );
        form.find('input[type="checkbox"]').prop( "disabled", false );
        form.find('input[type="checkbox"]').parents('label').removeClass( "text-danger" );

        let tr = $(this).parents('tr');
        let href = $(this).attr('href');
        let name = tr.find('td:eq(1)').text();
        let permission_id = tr.find('td:eq(2) span').html();
        permission_id = permission_id ? JSON.parse(permission_id) : [];
        let status = tr.find('td:eq(3)').find('span').attr('status');
        form.attr('action', href);
        modalGr.find('#name').val(name);
        modalGr.find('#status').val(status);
        modalGr.find('.modal-title').text('Cập nhật quyền');

        $('#selectBoxID input[type="checkbox"]').change(function (e) {
            e.preventDefault();
            if($(this).is(":checked")){
                $(this).parents('label').addClass('text-danger');
            }else{
                $(this).parents('label').removeClass('text-danger');
            }
            if($(this).parents('.groupBox').find('input[type="checkbox"]:eq(0)').is( ":checked" )){
                $(this).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "disabled", true );
                $(this).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "checked", false );
                $(this).parents('.groupBox').find('label:gt(0)').removeClass('text-danger');
            }else{
                $(this).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "disabled", false );
            };
        });

        modalGr.find('.modal-footer button[type="submit"]').text('Cập nhật');
        permission_id.forEach((id)=>{
            let _this = $(`#selectBoxID input[data-id="${id}"]`);
            _this.prop('checked', true);
            _this.parents('label').addClass('text-danger');
            if($(`#selectBoxID input[data-id="${id}"]`).parents('.groupBox').find('input[type="checkbox"]:eq(0)').is( ":checked" )){
                $(`#selectBoxID input[data-id="${id}"]`).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "disabled", true );
                $(`#selectBoxID input[data-id="${id}"]`).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "checked", false );
                $(`#selectBoxID input[data-id="${id}"]`).parents('.groupBox').find('label:gt(0)').removeClass('text-danger');
            }
        })
        form.validator('update');

        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                let data = form.serializeArray();
                e.preventDefault();
                let selected = [];
                $('#selectBoxID input:checked').each(function() {                    
                    selected.push($(this).attr('data-id'));
                });
                data.push({
                    name: 'permission_id',
                    value: selected,
                })
                $("#preloader").fadeIn();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let groupObj = results.group;
                        let permissionInfo = JSON.parse($('#permissionInfo').html());
                        let strPermission = '';
                        JSON.parse(groupObj.permission_id).forEach(element => {                            
                            strPermission += permissionInfo.find((item)=>{
                                return item.id === element;
                            }).name+'; ';
                        });
                        table.dataTable().fnUpdate([
                            parseInt(tr.find('td:eq(0)').text()) ,
                            groupObj.name,
                            `<span class="hidden">${groupObj.permission_id}</span>${strPermission}`,
                            function () {
                                if(groupObj.status == 1){
                                    return `<span status="${groupObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${groupObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editGroup" href="/adcp/permission/editgroup/${groupObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${groupObj.id} obj="Nhóm phân quyền" href="/adcp/permission/deletegroup">
                                <i class="fa fa-remove"></i>
                            </a>`,
                        ], tr, undefined, false, false);
                        swal("Thành công !!", `Cập nhật nhóm phân quyền thành công !!`, "success");
                        modalGr.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });

        modalGr.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalGr.off();
        });
    });
    page.on('click', '.addGroup', function (e) {
        e.preventDefault();
        let modalGr = $('#modalEditGroup')
        let href = $(this).attr('href');
        let table = $('#group');
        let form = $('#modalEditGroup form');
        modalGr.modal('show');
        form.attr('action', href);
        form.find('input, textarea, select').val('');
        modalGr.find('.modal-title').text('Thêm nhóm quyền');
        modalGr.find('.modal-footer button[type="submit"]').text('Thêm');

        $('#selectBoxID input[type="checkbox"]').change(function (e) {
            e.preventDefault();
            if($(this).is(":checked")){
                $(this).parents('label').addClass('text-danger');
            }else{
                $(this).parents('label').removeClass('text-danger');
            }
            if($(this).parents('.groupBox').find('input[type="checkbox"]:eq(0)').is( ":checked" )){
                $(this).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "disabled", true );
                $(this).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "checked", false );
                $(this).parents('.groupBox').find('label:gt(0)').removeClass('text-danger');
            }else{
                $(this).parents('.groupBox').find('input[type="checkbox"]:gt(0)').prop( "disabled", false );
            };
        });

        modalGr.find('.modal-footer button[type="submit"]').text('Cập nhật');

        form.validator('update');
        form.validator().on('submit', function (e) {
            if (e.isDefaultPrevented()) {
                //
            } else {
                let selected = [];
                $('#selectBoxID input:checked').each(function() {                    
                    selected.push($(this).attr('data-id'));
                });
                let data = form.serializeArray();
                data.push({
                    name: 'permission_id',
                    value: selected,
                })
                $("#preloader").fadeOut();
                $.ajax({
                    type: "POST",
                    url: href,
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        let groupObj = results.group;
                        let permissionInfo = JSON.parse($('#permissionInfo').html());
                        let strPermission = '';
                        JSON.parse(groupObj.permission_id).forEach(element => {                            
                            strPermission += permissionInfo.find((item)=>{
                                return item.id === element;
                            }).name+'; ';
                        });
                        
                        table.dataTable().fnAddData([
                            '',
                            groupObj.name,
                            `<span class="hidden">${groupObj.permission_id}</span>${strPermission}`,
                            function () {
                                if(groupObj.status == 1){
                                    return `<span status="${groupObj.status}" class="badge badge-success" style="font-size: 0.7rem; padding: 0.5rem">Active</span>`;
                                }
                                else{
                                    return `<span status="${groupObj.status}" class="badge badge-danger" style="font-size: 0.7rem; padding: 0.5rem">Disable</span>`;
                                }
                            },
                            `<a class="btn btn-primary btn-sm m-2-4 editGroup" href="/adcp/permission/editgroup/${groupObj.id}">
                                <i class="fa fa-edit"></i>
                            </a>
                            <a class="delete-confirm btn btn-danger btn-sm m-2-4" data-id=${groupObj.id} obj="Nhóm phân quyền" href="/adcp/permission/deletegroup">
                                <i class="fa fa-remove"></i>
                            </a>`,
                            
                        ]);
                        swal("Thành công !!", `Tạo nhóm phân quyền thành công !!`, "success");
                        modalGr.modal('hide');
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
                e.preventDefault();
            }
        });

        modalGr.on('hide.bs.modal', function (e) {
            form.validator('destroy');
            form.off();
            modalGr.off();
        });
    });

    //Show modal Log
    page.on('click', '#log .viewLog, #log_client .viewLog', function (e) {
        e.preventDefault();

        let modalLG = $('#modalViewLog')
        let _this = $(this);

        modalLG.modal('show');

        let tr = _this.parents('tr');
        let href = _this.attr('href');
        let name = tr.find('td:eq(1)').text();
        let note = tr.find('td:eq(2)').text();
        let status = tr.find('td:eq(3)').find('span').attr('status');

        modalLG.on('hide.bs.modal', function (e) {
            modalLG.off();
        });
    });

    //Show modal EmailSMS
    page.on('click', '#tb_email .viewEmailSMS', function (e) {
        e.preventDefault();
        let modalEM = $('#modalViewEmailSMS');
        let _this = $(this);

        modalEM.modal('show');

        let tr = _this.parents('tr');
        let href = _this.attr('href');

        modalEM.on('hide.bs.modal', function (e) {
            modalEM.off();
        });
    });

    page.on('click','a[href="#setting"]', function (e) {
        e.preventDefault();
        $('#frmEditSettingEmail').validator().on('submit', function (e) {
            e.preventDefault();
            let data = $('#frmEditSettingEmail').serializeArray();
            let href = $(this).attr('action');
            $("#preloader").fadeOut();
            $.ajax({
                type: "POST",
                url: href,
                data: data,
                dataType: "json",
                success: function (result) {
                    $("#preloader").fadeOut();
                    swal("Thành công !!", `Cập nhật thiết lập email thành công !!`, "success");
                },
                error: function (error) {
                    $("#preloader").fadeOut();
                    if (error.responseJSON === undefined) {
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                            type: "error",
                            html: true
                        });
                    } else {
                        let err = '';
                        error.responseJSON.error.forEach(element => {
                            err += element + ' !!</br>';
                        });
                        swal({
                            title: "Lỗi !!",
                            text: `<strong class="text-danger"> ${err}</strong>`,
                            type: "error",
                            html: true
                        });
                    }
                }
            });         
        });
        $('.multiple-select, .multiple-select2').select2({
            placeholder: "Chọn...",
            allowClear: true
        });
    });
    $('.multiple-select, .multiple-select2').select2({
        placeholder: "Chọn...",
        allowClear: true
    });

    if($('#frmEditProfile').length){
        $('#frmEditProfile').validator().on('submit', function (e) {
            let id = $('#frmEditProfile').attr('data-id');
            
            if (e.isDefaultPrevented()) {
                // handle the invalid form...
            } else {
                e.preventDefault();
                let data = $('#frmEditProfile').serializeArray();
                data.push({
                    name: 'id',
                    value: id
                })
                $("#preloader").fadeOut();
                $.ajax({
                    type: "POST",
                    url: $('#frmEditProfile').attr('action'),
                    data: data,
                    dataType: "json",
                    success: function (results) {
                        $("#preloader").fadeOut();
                        swal("Thành công !!", `Tài khoản được cập nhật thành công !!`, "success");
                    },
                    error: function (error) {
                        $("#preloader").fadeOut();
                        if (error.responseJSON === undefined) {
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                type: "error",
                                html: true
                            });
                        } else {
                            let err = '';
                            error.responseJSON.error.forEach(element => {
                                err += element + ' !!</br>';
                            });
                            swal({
                                title: "Lỗi !!",
                                text: `<strong class="text-danger"> ${err}</strong>`,
                                type: "error",
                                html: true
                            });
                        }
                    }
                });
            }
        });
        $('.changePassword').click(function (e) { 
            e.preventDefault();
            let modalCP = $('#modalChangePassword');
            modalCP.modal('show');
            let form = modalCP.find('form');
            form.validator().on('submit', function (e) {
                let id = form.attr('data-id');
                
                if (e.isDefaultPrevented()) {
                    // handle the invalid form...
                } else {
                    e.preventDefault();
                    let data = form.serializeArray();
                    data.push({
                        name: 'id',
                        value: id
                    })
                    $("#preloader").fadeOut();
                    $.ajax({
                        type: "POST",
                        url: form.attr('action'),
                        data: data,
                        dataType: "json",
                        success: function (results) {
                            $("#preloader").fadeOut();
                            modalCP.modal('hide');
                            swal("Thành công !!", `Thay đổi mật khẩu thành công !!`, "success");
                        },
                        error: function (error) {
                            $("#preloader").fadeOut();
                            if (error.responseJSON === undefined) {
                                swal({
                                    title: "Lỗi !!",
                                    text: `<strong class="text-danger">Lỗi chưa xác định !!</strong>`,
                                    type: "error",
                                    html: true
                                });
                            } else {
                                let err = '';
                                error.responseJSON.error.forEach(element => {
                                    err += element + ' !!</br>';
                                });
                                swal({
                                    title: "Lỗi !!",
                                    text: `<strong class="text-danger"> ${err}</strong>`,
                                    type: "error",
                                    html: true
                                });
                            }
                        }
                    });
                }
            });
            modalCP.on('hide.bs.modal', function (e) {
                form.validator('destroy');
                form.off();
                modalCP.off();
            });
        });
    }

    if($('#avatar').length){
        $('#avatar').change(function (e) { 
            e.preventDefault();
            let _this = $(this);
            let avatar = _this[0].files[0];
            if(avatar.size){
                let id = $(this).attr('data-id');                
                if((/\.(gif|jpg|jpeg|tiff|png)$/i).test(avatar.name)){
                    swal({
                        title: "Bạn có chắc là muốn thay đổi hình đại diện này ?",
                        text: `Bạn sẽ không khôi phục lại hình đại diện trước đây !!`,
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "Đồng ý",
                        closeOnConfirm: false
                    }, function () {
                        let data = new FormData();
                        data.append('avatar',avatar);
                        $("#preloader").fadeOut();
                        $.ajax({
                            type: "POST",
                            url: '/adcp/user/avatar/'+id,
                            data: data,
                            contentType: false,
                            processData: false,
                            dataType: 'json',
                            success: function (results) {
                                $("#preloader").fadeOut();
                                swal("Thành công !!", `Ảnh đại diện được cập nhật thành công !!`, "success");
                                _this.prev('img').attr('src','/files/avatar/'+results.avatar);
                                $('.profile-pic').attr('src','/files/avatar/'+results.avatar);
                            },
                            error: function (err) {
                                $("#preloader").fadeOut();
                                if (err.responseJSON === undefined) {
                                    swal({
                                        title: "Lỗi !!",
                                        text: `<strong class="text-danger">Lỗi không xác định !!</strong>`,
                                        type: "error",
                                        html: true
                                    });
                                } else {
                                    swal({
                                        title: "Lỗi !!",
                                        text: `<strong class="text-danger">Không thay đổi được</strong>`,
                                        type: "error",
                                        html: true
                                    });
                                }
                            }
                        });
            
                    });
                }else{
                    swal({
                        title: "Lỗi !!",
                        text: `<strong class="text-danger"> Không đúng định dạng hình !!</strong>`,
                        type: "error",
                        html: true
                    });
                }
            }else{
                swal({
                    title: "Lỗi !!",
                    text: `<strong class="text-danger"> Hình không tồn tại !!</strong>`,
                    type: "error",
                    html: true
                });
            }
        });
    }
    if(!$('#settingManager ul li').length){
        $('#settingManager').addClass('hidden');
    }
});